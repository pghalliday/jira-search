// Generated by CoffeeScript 1.9.3
(function() {
  var JSONStream, Q, reduce, request;

  request = require('request');

  JSONStream = require('JSONStream');

  reduce = require('stream-reduce');

  Q = require('q');

  module.exports = function(params) {
    var queryParams;
    queryParams = function(startAt, maxResults, fields, expand) {
      return {
        method: 'GET',
        strictSSL: params.strictSSL,
        auth: {
          user: params.user,
          pass: params.pass,
          sendImmediately: true
        },
        uri: params.serverRoot + '/rest/api/2/search',
        qs: {
          jql: params.jql,
          maxResults: maxResults,
          startAt: startAt,
          fields: fields,
          expand: expand
        }
      };
    };
    return Q().then(function() {
      var deferred, jsonStream, query;
      query = request(queryParams(0, 0, '', ''));
      deferred = Q.defer();
      jsonStream = JSONStream.parse('total');
      jsonStream.once('data', function(total) {
        return deferred.resolve(total);
      });
      query.pipe(jsonStream);
      return deferred.promise;
    }).then(function(total) {
      var issuesPromise, issuesPromiseCalls, remaining, start;
      params.onTotal(total);
      remaining = total;
      issuesPromise = function(start, array) {
        var deferred, jsonStream, query, reduceStream;
        deferred = Q.defer();
        jsonStream = JSONStream.parse('issues.*');
        reduceStream = reduce(function(issues, issue) {
          return issues.concat(params.mapCallback(issue));
        }, []);
        reduceStream.once('data', function(issues) {
          return deferred.resolve(array.concat(issues));
        });
        query = request(queryParams(start, params.maxResults, params.fields, params.expand));
        query.pipe(jsonStream).pipe(reduceStream);
        return deferred.promise;
      };
      issuesPromiseCalls = (function() {
        var results;
        results = [];
        while (remaining > 0) {
          start = total - remaining;
          remaining -= params.maxResults;
          results.push(issuesPromise.bind(null, start));
        }
        return results;
      })();
      return issuesPromiseCalls.reduce(function(soFar, f) {
        return soFar.then(f);
      }, Q([]));
    });
  };

}).call(this);
